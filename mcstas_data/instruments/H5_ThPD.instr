/*******************************************************************************
*         McStas instrument definition URL=http://www.mcstas.org
*
* Instrument: test (rename also the example and DEFINE lines below)
*
* %Identification
* Written by: Konstantin Pavlov
* Date: 13.02.2018
* Origin: PNPI
* Release: McStas
* Version: 0.2
* %INSTRUMENT_SITE: Institution_name_as_a_single word
*
* Instrument short description
* Powder diffractometer model adapted for school teaching lab
* %Description
* Instrument longer description (type, elements, usage...)
*
* Example: mcrun test.instr <parameters=values>
*
* %Parameters
* lambda: [AA] Operating wavelength for an experiment
* col1: [min] Horizontal divergence set by primary collimator (before monochromator)
* mon_mos: [min] Monochromator mosaicity
* col2: [min] Horizontal divergence set by secondary collimator (between monochromator and sample)
* col3: [min] Horizontal divergence set by radial collimator (sample-to-detector)
*
* %Link
* A reference/HTML link for more information
*
* %End
*******************************************************************************/

/* Change name of instrument and input parameters with default values */
DEFINE INSTRUMENT PD (lambda = 1.2, int sample_num = 1, int dia_dia = 6)

/* The DECLARE section allows us to declare variables or  small      */
/* functions in C syntax. These may be used in the whole instrument. */
DECLARE
%{
double divx_source, divy_source = 0.001;
double beam_w = 0.01, beam_h = 0.1;
double lambda_min, lambda_max;

double monok_d = 1.714;
double monok_angle;

double col1 = 10, mon_mos = 40, col2=20, col3 = 10;

double det_R = 2.0;
const char * sample;
%}

/* The INITIALIZE section is executed when the simulation starts     */
/* (C code). You may use them as component parameter values.         */
INITIALIZE
%{
lambda_min = 0.985*lambda;
lambda_max = 1.015*lambda;
divx_source = 2.0 * col1 / 60.0;
monok_angle = asin(lambda / 2.0 / monok_d) * RAD2DEG;

switch( dia_dia )   
{  
    case 3:  
        col1 = col1 / 1.5;
        mon_mos = mon_mos / 1.5;
        col2 = col2 / 1.5;
        col3 = col3 / 1.5;
        break;  
    case 6 :  
        break;  
    case 10 :  
        col1 = col1 * 1.5;
        mon_mos = mon_mos * 1.5;
        col2 = col2 * 1.5;
        col3 = col3 *1.5;
        break;  

    default :
        printf("Wrong diaphragm_radius! Operating at 6mm.\n");
        break; 
}

switch( sample_num )   
{  
    case 1:  
        sample = "Cu.laz";
        break;  
    case 2 :  
        sample = "Si.laz";
        break;  
    case 3 :  
        sample = "Ge.laz";
        break;  
    case 4 :  
        sample = "Al2O3_sapphire.laz";
        break;  
    case 5 :  
        sample = "Na2Ca3Al2F14.laz";
        break;  

    default :
        printf("Wrong sample choice! Operating at #1 - Cu.\n");
        sample = "Cu.laz";
        break; 
}
%}

/* Here comes the TRACE section, where the actual      */
/* instrument is defined as a sequence of components.  */
TRACE

/* The Arm() class component defines reference points and orientations  */
/* in 3D space. Every component instance must have a unique name. Here, */
/* Origin is used. This Arm() component is set to define the origin of  */
/* our global coordinate system (AT (0,0,0) ABSOLUTE). It may be used   */
/* for further RELATIVE reference, Other useful keywords are : ROTATED  */
/* EXTEND GROUP PREVIOUS. Also think about adding a neutron source !    */
/* Progress_bar is an Arm displaying simulation progress.               */
COMPONENT Origin = Progress_bar()
  AT (0,0,0) ABSOLUTE

COMPONENT Source = Source_gen(
    xwidth = beam_w, yheight = beam_h, dist = 0.5, focus_xw = beam_w, focus_yh = beam_h, Lmin = lambda_min,
    Lmax=lambda_max, I1 = 1e13, T1=300)
  AT (0, 0, 0) RELATIVE Origin

	COMPONENT Source_xy = Monitor_nD(
	    xwidth = 0.02, yheight = 0.12, restore_neutron = 1,
	    options = "x limits = [-0.01 0.01] bins = 120 y limits = [-0.06 0.06] bins = 120")
	  AT (0, 0, 0.501) RELATIVE Source

	COMPONENT Source_lambda = L_monitor(
	    nL = 100, filename = "Sou_lam.L", xwidth = 0.02,
	    yheight = 0.12, Lmin = lambda_min, Lmax = lambda_max,
	    restore_neutron = 1)
	  AT (0, 0, 0) RELATIVE PREVIOUS

	COMPONENT Source_dx = Monitor_nD(
	    xwidth = 0.02, yheight = 0.12, restore_neutron = 1,
	    options = "dx limits = [-1 1] bins = 80")
	  AT (0, 0, 0) RELATIVE PREVIOUS

	COMPONENT Source_dy = Monitor_nD(
	    xwidth = 0.02, yheight = 0.12, restore_neutron = 1,
	    options = "dy limits = [-2 2] bins = 80")
	  AT (0, 0, 0) RELATIVE PREVIOUS


COMPONENT Col1 = Collimator_linear(
    length = 0.5, divergence = col1)
  AT (0, 0, 0.51) RELATIVE Source

	COMPONENT Col1_dx = Monitor_nD(
	    xwidth = 0.02, yheight = 0.12, restore_neutron = 1,
	    options = "dx limits = [-0.5 0.5] bins = 80")
	  AT (0, 0, 0.5005) RELATIVE PREVIOUS

COMPONENT Monok_Arm = Arm(
    )
  AT (0, 0, 0.56) RELATIVE Col1
  ROTATED (0, 0, 0) RELATIVE Origin

SPLIT COMPONENT Monok = Monochromator_flat(
    zwidth = 0.1, yheight = 0.14, mosaich = mon_mos,
    mosaicv = mon_mos, r0 = 1.0, DM = monok_d)
  AT (0, 0, 0) RELATIVE Monok_Arm
  ROTATED (0, -1.0 * monok_angle, 0) RELATIVE Monok_Arm

COMPONENT Instrument_Arm = Arm(
    )
  AT (0, 0, 0) RELATIVE Monok_Arm
  ROTATED (0, -2.0 * monok_angle, 0) RELATIVE Monok_Arm

COMPONENT Col2 = Collimator_linear(
    length = 0.3, divergence = col2)
  AT (0, 0, 0.16) RELATIVE Instrument_Arm

	COMPONENT Col2_dx = Monitor_nD(
	    xwidth = 0.02, yheight = 0.12, restore_neutron = 1,
	    options = "dx limits = [-0.5 0.5] bins = 80")
	  AT (0, 0, 0.300001) RELATIVE PREVIOUS

COMPONENT Dia_sample = Slit(
    xwidth = 0.01, yheight = 0.1)
  AT (0, 0, 0.46) RELATIVE Col2

	COMPONENT Sample_xy = Monitor_nD(
	    xwidth = 0.02, yheight = 0.12, restore_neutron = 1,
	    options = "x limits = [-0.01 0.01] bins = 120 y limits = [-0.06 0.06] bins = 120")
	  AT (0, 0, 0.0011) RELATIVE Dia_sample

	COMPONENT Sample_lambda = L_monitor(
	    nL = 70, filename = "Sam_lam.L", xwidth = 0.02,
	    yheight = 0.12, Lmin = 0.94*lambda, Lmax = 1.06*lambda,
	    restore_neutron = 1)
	  AT (0, 0, 0) RELATIVE PREVIOUS

	COMPONENT Sample_dx = Monitor_nD(
	    xwidth = 0.02, yheight = 0.12, restore_neutron = 1,
	    options = "dx bins = 80")
	  AT (0, 0, 0) RELATIVE PREVIOUS

SPLIT COMPONENT Sample = PowderN(
    reflections = sample, yheight = 0.05, xwidth = 0.01,
    zdepth = 0.01)
  AT (0, 0, 0.02) RELATIVE Dia_sample

COMPONENT Col3 = Collimator_radial(
    yheight = 0.1, length = 0.98, divergence = col3,
    theta_min = 5, theta_max = 165, radius = 0.02)
  AT (0, 0, 0) RELATIVE Sample

COMPONENT Detector1 = Monitor_nD(
    yheight = 0.14, restore_neutron = 1, radius = 1.02, filename = "Detector1.th",
    options = "banana theta limits = [5 165] bins = 400")
  AT (0, 0, 0) RELATIVE Sample

COMPONENT Detector2 = Monitor_nD(
    yheight = 0.5, restore_neutron = 1, radius = 1.02, filename = "Detector2.th",
    options = "banana theta limits = [5 165]  bins=400 y bins = 200")
  AT (0, 0, 0) RELATIVE Sample


/* This section is executed when the simulation ends (C code). Other    */
/* optional sections are : SAVE                                         */
FINALLY
%{
%}
/* The END token marks the instrument definition end */
END












