/*******************************************************************************
*         McStas instrument definition URL=http://www.mcstas.org
*
* Instrument: test (rename also the example and DEFINE lines below)
*
* %Identification
* Written by: Konstantin Pavlov
* Date: 23.02.2018
* Origin: PNPI
* Release: McStas
* Version: 0.2
* %INSTRUMENT_SITE: Institution_name_as_a_single word
*
* Instrument short description
* Double-crystal ultrasmall-angle diffractometer model adapted for school teaching lab
* %Description
* Instrument longer description (type, elements, usage...)
*
* Example: mcrun test.instr <parameters=values>
*
* %Parameters
* lambda: [AA] Operating wavelength for an experiment
* rock_angle: [deg] Analyser rotating angle
* is_sample: [bool] Sample or empty beam
*
* %Link
* A reference/HTML link for more information
*
* %End
*******************************************************************************/

/* Change name of instrument and input parameters with default values */
DEFINE INSTRUMENT DCD (lambda = 2.2, rock_angle = 0, int is_sample = 0)

/* The DECLARE section allows us to declare variables or  small      */
/* functions in C syntax. These may be used in the whole instrument. */
DECLARE
%{
double divx_source, divy_source = 0.001;
double beam_w = 0.02, beam_h = 0.1;
double lambda_min, lambda_max;
double col1 = 3, mos = 3;

double monok_d = 1.714;
double monok_angle;

double sam_th = 0;
%}

/* The INITIALIZE section is executed when the simulation starts     */
/* (C code). You may use them as component parameter values.         */
INITIALIZE
%{
lambda_min = 0.985*lambda;
lambda_max = 1.015*lambda;
divx_source = 2.0 * col1 / 60.0;
monok_angle = asin(lambda / 2.0 / monok_d) * RAD2DEG;

switch( is_sample )   
{  
    case 0:  
        sam_th = 0;  
        break;  
    case 1 :  
        sam_th = 0.01;  
        break;  
    default :
        printf("Wrong is_sample option! Operating at #0 - empty beam.\n");
        sam_th = 0;
        break; 
}
%}

/* Here comes the TRACE section, where the actual      */
/* instrument is defined as a sequence of components.  */
TRACE

/* The Arm() class component defines reference points and orientations  */
/* in 3D space. Every component instance must have a unique name. Here, */
/* Origin is used. This Arm() component is set to define the origin of  */
/* our global coordinate system (AT (0,0,0) ABSOLUTE). It may be used   */
/* for further RELATIVE reference, Other useful keywords are : ROTATED  */
/* EXTEND GROUP PREVIOUS. Also think about adding a neutron source !    */
/* Progress_bar is an Arm displaying simulation progress.               */
COMPONENT Origin = Progress_bar()
  AT (0,0,0) ABSOLUTE

COMPONENT Source = Source_gen(
    xwidth = beam_w, yheight = beam_h, dist = 0.5, focus_xw = beam_w, focus_yh = beam_h, Lmin = lambda_min,
    Lmax=lambda_max, I1 = 1e13, T1=300)
  AT (0, 0, 0) RELATIVE Origin

	COMPONENT Source_xy = Monitor_nD(
	    xwidth = 0.02, yheight = 0.12, restore_neutron = 1,
	    options = "x limits = [-0.01 0.01] bins = 120 y limits = [-0.06 0.06] bins = 120")
	  AT (0, 0, 0.501) RELATIVE Source

	COMPONENT Source_lambda = L_monitor(
	    nL = 100, filename = "Sou_lam.L", xwidth = 0.02,
	    yheight = 0.12, Lmin = lambda_min, Lmax = lambda_max,
	    restore_neutron = 1)
	  AT (0, 0, 0) RELATIVE PREVIOUS

	COMPONENT Source_dx = Monitor_nD(
	    xwidth = 0.02, yheight = 0.12, restore_neutron = 1,
	    options = "dx limits = [-1 1] bins = 80")
	  AT (0, 0, 0) RELATIVE PREVIOUS

	COMPONENT Source_dy = Monitor_nD(
	    xwidth = 0.02, yheight = 0.12, restore_neutron = 1,
	    options = "dy limits = [-2 2] bins = 80")
	  AT (0, 0, 0) RELATIVE PREVIOUS


COMPONENT Col1 = Collimator_linear(
    length = 0.5, divergence = col1)
  AT (0, 0, 0.51) RELATIVE Source

	COMPONENT Col1_dx = Monitor_nD(
	    xwidth = 0.02, yheight = 0.12, restore_neutron = 1,
	    options = "dx limits = [-0.5 0.5] bins = 80")
	  AT (0, 0, 0.55) RELATIVE PREVIOUS

COMPONENT Monok_Arm = Arm(
    )
  AT (0, 0, 0.56) RELATIVE Col1
  ROTATED (0, 0, 0) RELATIVE Origin

COMPONENT Monok = Monochromator_flat(
    zwidth = 0.1, yheight = 0.14, mosaich = mos,
    mosaicv = 40, r0 = 1.0, DM = monok_d)
  AT (0, 0, 0) RELATIVE Monok_Arm
  ROTATED (0, monok_angle, 0) RELATIVE Monok_Arm

COMPONENT Instrument_Arm = Arm(
    )
  AT (0, 0, 0) RELATIVE Monok_Arm
  ROTATED (0, 2.0 * monok_angle, 0) RELATIVE Monok_Arm


COMPONENT Dia_sample = Slit(
    xwidth = 0.02, yheight = 0.1)
  AT (0, 0, 0.48) RELATIVE Instrument_Arm

	COMPONENT Sample_xy = Monitor_nD(
	    xwidth = 0.04, yheight = 0.12, restore_neutron = 1,
	    options = "x limits = [-0.02 0.02] bins = 120 y limits = [-0.06 0.06] bins = 120")
	  AT (0, 0, 0.481) RELATIVE Instrument_Arm

	COMPONENT Sample_lambda = L_monitor(
	    nL = 100, filename = "Sam_lam.L", xwidth = 0.04,
	    yheight = 0.12, Lmin = lambda_min, Lmax = lambda_max,
	    restore_neutron = 1)
	  AT (0, 0, 0) RELATIVE PREVIOUS

	COMPONENT Sample_dx = Monitor_nD(
	    xwidth = 0.04, yheight = 0.12, restore_neutron = 1,
	    options = "dx limits = [-1 1] bins = 80")
	  AT (0, 0, 0) RELATIVE PREVIOUS

	COMPONENT Sample_dy = Monitor_nD(
	    xwidth = 0.04, yheight = 0.12, restore_neutron = 1,
	    options = "dy limits = [-2 2] bins = 80")
	  AT (0, 0, 0) RELATIVE PREVIOUS

SPLIT COMPONENT Sample_spheres = SANSSpheres(
	R = 4000.0, dR= 0, Concentration = 0.01, DeltaRho = 1.0e-14, AbsorptionCrosssection = 0.0, 
	xwidth = 0.02, yheight = 0.12, zdepth = sam_th, SampleToDetectorDistance = 0.5,
	DetectorRadius = 0.01)
  AT (0, 0, 0.5) RELATIVE Instrument_Arm


COMPONENT Anal_Arm = Arm(
    )
  AT (0, 0, 1.0) RELATIVE Instrument_Arm
  ROTATED (0, 0, 0) RELATIVE Instrument_Arm

SPLIT COMPONENT Analyser = Monochromator_flat(
    zwidth = 0.1, yheight = 0.14, mosaich = mos,
    mosaicv = 40, r0 = 1.0, DM = monok_d)
  AT (0, 0, 0) RELATIVE Anal_Arm
  ROTATED (0, -monok_angle + rock_angle, 0) RELATIVE Anal_Arm

COMPONENT Det_Arm = Arm(
    )
  AT (0, 0, 0) RELATIVE Anal_Arm
  ROTATED (0, -2.0 * monok_angle, 0) RELATIVE Anal_Arm

COMPONENT Detector = L_monitor(
    nL = 100, filename = "Detector.L", xwidth = 0.1,
    yheight = 0.14, Lmin = lambda_min, Lmax = lambda_max,
    restore_neutron = 1)
  AT (0, 0, 0.1) RELATIVE Det_Arm

/* This section is executed when the simulation ends (C code). Other    */
/* optional sections are : SAVE                                         */
FINALLY
%{
%}
/* The END token marks the instrument definition end */
END





















