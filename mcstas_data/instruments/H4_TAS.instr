/*******************************************************************************
*         McStas instrument definition URL=http://www.mcstas.org
*
* Instrument: ColdTas
*
* %Identification
* Written by: Yury Kireenko
* Edited by: Konstantin Pavlov
* Date: 24.04.2017
* Origin: PNPI
* Release: McStas
* Version: 0.2
* %INSTRUMENT_SITE: Institution_name_as_a_single word
*
* Instrument short description
* Thermal triple-axis spectrometer model adapted to school lab
* %Description
* Instrument longer description (type, elements, usage...)
*
* Example: mcrun test.instr <parameters=values>
*
* %Parameters
* Par1: [unit] Parameter1 description
*
* %Link
* A reference/HTML link for more information
*
* %End
*******************************************************************************/
DEFINE INSTRUMENT TAS (lambda = 2, scat_angle = 50, an_angle = 90)

DECLARE
%{

// source parameters
double source_width = 0.02 , source_height = 0.1;
double source_T1 = 300 , source_I1 = 2e14;
double lambda_min, lambda_max;

// monochromator parameters - single Cu111
double mon_DM = 2.087;
double mon_mos = 40;
double mon_angle;
double mon_width = 0.20, mon_height = 0.12;
//double TT=72.69, OM=-43.3, C=8;

double coll_div = 60;
double Ei, Ef, qval;

// analyser parameters - single PG002
double an_DM = 3.355;
double an_mos = 60;
double an_lambda;
//double an_angle;
%}


INITIALIZE
%{
lambda_min = 0.985*lambda;
lambda_max = 1.015*lambda;

mon_angle = RAD2DEG*asin(lambda/2.0/mon_DM);
Ei = 9.04*9.04 / lambda / lambda;
qval = 4.0*PI*sin(DEG2RAD*scat_angle/2.0)/lambda;

an_lambda = 2.0 * an_DM * sin(DEG2RAD*an_angle/2.0);
//an_angle = RAD2DEG*asin(an_lambda/2.0/an_DM);
Ef = 9.04*9.04 / an_lambda / an_lambda;

printf(" \nmonok lambda=%lfAA\n", lambda);
printf("monok take-off angle=%lfdegs\n", 2.0*mon_angle);
printf("Ei=%lfmeV\n", Ei);
printf("q=%lfAA-1\n", qval);
printf("scattering angle 2theta=%lfdegs\n", scat_angle);
printf("anal lambda=%lfAA\n", an_lambda);
printf("anal take-off angle=%lfdegs\n", an_angle);
printf("Ef=%lfmeV\n", Ef);

%}


TRACE

COMPONENT Origin = Progress_bar ()
AT (0, 0, 0) ABSOLUTE

/* ******************************* Source *************************************/

COMPONENT Source = Source_gen (
  focus_xw =  source_width, focus_yh = source_height , dist = 1.0,
  I1 = source_I1, yheight = 0.12 , xwidth = 0.04, T1 = source_T1,
  Lmin = lambda_min, Lmax = lambda_max,
  focus_aw = DEG2RAD*0.67, focus_ah = DEG2RAD*0.67)
  AT (0, 0, 0) RELATIVE Origin

/* ******************************* Monochromator  *************************************/     

COMPONENT mon_in = Arm(
    )
  AT (0, 0, 1.12) RELATIVE Source

COMPONENT Monok = Monochromator_flat(
    zwidth = mon_width, yheight = mon_height, mosaich = mon_mos,
    mosaicv = mon_mos, r0 = 0.99, DM = mon_DM)
  AT (0, 0, 0) RELATIVE mon_in
  ROTATED (0, -1.0 * mon_angle, 0) RELATIVE mon_in

COMPONENT mon_out = Arm(
    )
  AT (0, 0, 0) RELATIVE mon_in
  ROTATED (0, -2.0 * mon_angle, 0) RELATIVE mon_in


COMPONENT Coll1 = Collimator_linear(
    length = 0.3, divergence = coll_div)
  AT (0, 0, 0.82) RELATIVE mon_out
  ROTATED (0, 0, 0) RELATIVE mon_out

COMPONENT Dia_sample = Slit(
    xwidth = 0.02, yheight = 0.10)
  AT (0, 0, 0.31) RELATIVE Coll1

	COMPONENT sample_xy = Monitor_nD(
	    xwidth =  0.04, yheight = 0.16, options = "x y", bins=100, restore_neutron = 1)
	  AT (0, 0, 0.005) RELATIVE Dia_sample

	COMPONENT Sample_lam = L_monitor(
	    nL = 50, filename = "Sample.L", xwidth = 0.04, yheight = 0.16,
	    Lmin = lambda_min, Lmax = lambda_max, restore_neutron = 1)
	  AT (0, 0, 0) RELATIVE PREVIOUS

	COMPONENT sample_dxdy = Monitor_nD(
	    xwidth =  0.04, yheight = 0.16, options = "dx dy", bins=100, restore_neutron = 1)
	  AT (0, 0, 0) RELATIVE PREVIOUS

/* ******************************* Sample  *************************************/    

COMPONENT sample_in = Arm()
AT (0, 0, 1.05) RELATIVE Coll1

/*
SPLIT COMPONENT sample = Phonon_simple(
     radius=0.02,yheight = 0.02,
     target_index=+2,
     sigma_abs=0.17, sigma_inc=0.003, b=0.90, M=208,
     c=8, a=4.95, DW=1.00, T=300)
  AT (0, 0,0) RELATIVE sample_in
ROTATED (0,0,0) RELATIVE sample_in
*/

SPLIT 10 COMPONENT sample = Phonon_simple(
    radius = 0.01, yheight = 0.12, target_index = +2, focus_r = 2.05,
    sigma_abs = 0.17, sigma_inc = 0.003, a = 4.95, b = 0.90, M = 208, c = 8.0,
    DW = 1.0, T = 300)
  AT (0, 0, 0) RELATIVE sample_in
  ROTATED (0, 0, 0) RELATIVE sample_in

COMPONENT sample_out = Arm()
  AT (0, 0, 0) RELATIVE sample_in
  ROTATED (0, scat_angle,0) RELATIVE sample_in

	COMPONENT befanL = L_monitor(
	    nL = 50, filename = "Detector.L", xwidth = 0.02, yheight = 0.12,
	    Lmin = 0.97*an_lambda, Lmax = 1.03*an_lambda)
	  AT (0, 0, 2.05) RELATIVE sample_out
/*
COMPONENT Coll2 = Collimator_linear(
    length = 0.3, divergence = coll_div)
  AT (0, 0, 0.05) RELATIVE sample_out
  ROTATED (0, 0, 0) RELATIVE sample_out
*/
/* ******************************* Analyser  *************************************/
/*
	COMPONENT befan_xy = Monitor_nD(
	    xwidth =  0.1, yheight = 0.1, options = "x y", bins=100, restore_neutron = 1)
	  AT (0, 0, 0.3+0.0001) RELATIVE Coll2

	COMPONENT befanL = L_monitor(
	    nL = 50, filename = "befan.L", xwidth = 0.1, yheight = 0.1,
	    Lmin = 0., Lmax = lambda_max, restore_neutron = 1)
	  AT (0, 0, 0) RELATIVE PREVIOUS

	COMPONENT befan_dxdy = Monitor_nD(
	    xwidth =  0.1, yheight = 0.1, options = "dx dy", bins=100, restore_neutron = 1)
	  AT (0, 0, 0) RELATIVE PREVIOUS

COMPONENT an_in = Arm(
    )
  AT (0, 0, 0.12) RELATIVE Slit2

COMPONENT Anal = Monochromator_flat(
    zwidth = mon_width, yheight = mon_height, mosaich = an_mos,
    mosaicv = 0, r0 = 0.99, DM = an_DM)
  AT (0, 0, 0) RELATIVE an_in
  ROTATED (0, -1.0 * an_angle, 0) RELATIVE an_in

COMPONENT an_out = Arm(
    )
  AT (0, 0, 0) RELATIVE an_in
  ROTATED (0, -2.0 * an_angle, 0) RELATIVE an_in

COMPONENT Coll3 = Collimator_linear(
    length = 0.3, divergence = coll_div)
  AT (0, 0, 0.12) RELATIVE an_out
  ROTATED (0, 0, 0) RELATIVE an_out
*/
/* ******************************* Detectors  *************************************/    

/*
	COMPONENT sqw = Monitor_Sqw(
	    yheight = 0.2, radius = 0.04, bins = 300,
	    filename = "sqw.pho")
	  AT (0, 0, 0) RELATIVE sample_in
*/
/*
COMPONENT sample = Incoherent(
    xwidth = 0.01, yheight = 0.01, zdepth = 0.01, target_x = 0,target_y=0, target_z = 0.5,focus_xw=0.35, focus_yh=0.35)
  AT (0, 0, 0.5) RELATIVE sample_in
EXTEND
%{
     if (!SCATTERED) ABSORB;
%}
*/

/* ******************************* end  *************************************/ 

FINALLY
%{
%}

END


























































